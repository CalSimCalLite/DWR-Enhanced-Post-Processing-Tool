!,Functions List,
!%2C (HTML standard value) is a String replacement for comma literals as commas are not valid characters in CSV formatted files
!Function.csv - this file contains jython code snippets used to fill out relevant data for the QA/QC report. Input parameters are replaced with parameters from Summary.csv. Functions must fit into a single line/column so the java.util.stream API is heavily utilized
!Special Variables - dssReader is an instance of the DssReader class that has getGuiLinkData getDtsData and getThresholdData functions for the scenario for the given context
!Special Variables - titleReader is an instance of the TitleReader class that has getGuiLinkId and getDtsTitle functions for the scenario for the given context
!Special Variables - periodFilter is a filter for the water year period or long term period filter
!Special Variables - commonPeriodFilter is a filter for the period common to both base and alternative scenarios
!Helper Scripts - jython scripts in the /config/qaqc/scripts directory are loaded at runtime. FunctionalAPIs.py and QaQcScriptFunctions.py are specifically used when the Stream API is insufficient
!Reference documentation - JythonFunctions.docx for more information
!%2C (HTML standard value) is a String replacement for comma literals as commas are not valid characters in CSV formatted files
!,,
1,DvAnnualExceedanceWYD(${guiLinkId}%2C ${month}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().collect(collectingAndThen(groupingBy(mapToPeriodStartYear(${month})%2C averagingDouble(jdf(lambda e : e.getValue())))%2CgenerateExceedanceValues()))
2,DtsTitle(${dtsId}),titleReader.getDtsTitle(${dtsId})
3,DtsEntirePeriodPerMonth(${dtsId}),calculateExceedance(dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).map(jf(lambda x : x.getValue())).collect(toList()))
4,DtsEntirePeriodExceedanceAllMonths(${dtsId}),calculateExceedance(ArrayList(dssReader.getDtsData(${dtsId}).values()))
5,DvEntirePeriodExceedancePerMonth(${guiLinkId}),calculateExceedance(dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(periodFilter).map(jf(lambda x : x.getValue())).collect(toList()))
6,DvEntirePeriodMonthlyAverage(${guiLinkId}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(commonPeriodFilter).collect(groupingBy(jf(lambda k : k.getKey().getMonth())%2C averagingDouble(jdf(lambda e : e.getValue()))))
7,DtsEntirePeriodMonthlyAverage(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).collect(groupingBy(jf(lambda e : e.getKey().getMonth())%2C averagingDouble(jdf(lambda e : e.getValue()))))
8,DvExceedanceSingleMonth(${guiLinkId}%2C ${month}),calculateExceedance(dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(MonthPeriodFilter(${month})).map(jf(lambda x : x.getValue())).collect(toList()))
9,GuiLinkTitle(${guiLinkId}),titleReader.getGuiLinkId(${guiLinkId})
10,DtsPeriodAverage(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).mapToDouble(jdf(lambda e : e.getValue())).average().orElse(Double.NaN)
11,DtsPeriodAverageOneMonth(${dtsId}%2C ${month}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(MonthPeriodFilter(${month})).mapToDouble(jdf(lambda e : e.getValue())).average().orElse(0)
11,DvPeriodAverageOneMonth(${guiLinkId}%2C ${month}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(periodFilter).filter(MonthPeriodFilter(${month})).mapToDouble(jdf(lambda e : e.getValue())).average().orElse(0)
12,DvPeriodAverage(${guiLinkId}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(periodFilter).mapToDouble(jdf(lambda e : e.getValue())).average().orElse(0)
13,DvPeriodAnnualAverage(${guiLinkId}%2C ${month}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(buildPeriodFilterForEndMonth(waterYearPeriodRanges%2C ${month})).mapToDouble(jdf(lambda e : e.getValue())).average().orElse(Double.NaN)
14,Dv(${guiLinkId}%2C ${month}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(periodFilter).filter(MonthPeriodFilter(${month})).mapToDouble(jdf(lambda e : e.getValue())).average().orElse(0)
15,DvGreaterThan0PeriodAverage(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v > 0)).count()
16,DvLessThan0PeriodAverage(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v < 0)).count()
17,DtsPeriodCount(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v == comparisonValue)).count()
18,DtsLessThanReportDv(${dtsId}%2C${guiLinkId1}%2C${guiLinkId2}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda v: v.getValue() == 300)).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId1}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId2}).get(e.getKey()))))).collect(toList())
19,DtsEqualsReportDv(${dtsId}%2C${guiLinkId1}%2C${guiLinkId2}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda v: v.getValue() == 200)).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId1}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId2}).get(e.getKey()))))).collect(toList())
20,DtsGreaterThanReportDv(${dtsId}%2C${guiLinkId1}%2C${guiLinkId2}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda v: v.getValue() == 100)).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId1}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId2}).get(e.getKey()))))).collect(toList())
21,DtsIgnoreReportDv(${dtsId}%2C${guiLinkId1}%2C${guiLinkId2}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda v: v.getValue() == 999)).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId1}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId2}).get(e.getKey()))))).collect(toList())
22,DtsGreaterThan0ReportDv(${guiLinkId}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(periodFilter).filter(jp(lambda v: v.getValue() > 0)).map(jf(lambda e : buildListPrefix(e) + formatAsString(e.getValue()))).collect(toList())
23,DtsGreaterThanReportThreshold(${dtsId}%2C thresholdId),"dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda e: e.getValue() > dssReader.getThresholdData(${thresholdId}).get(e.getKey()))).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(e.getValue())%2C formatAsString(dssReader.getThresholdData(${thresholdId}).get(e.getKey()))))).collect(toList())"
24,DtsLessThanReportThreshold(${dtsId}%2C thresholdId),"dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda e: e.getValue() < dssReader.getThresholdData(${thresholdId}).get(e.getKey()))).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(e.getValue())%2C formatAsString(dssReader.getThresholdData(${thresholdId}).get(e.getKey()))))).collect(toList())"
25,DtsNot0ReportMonth(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda e: e.getValue() != 0)).map(jf(lambda e : buildListPrefix(e))).collect(toList())
26,DtsNotEqualReportDts(${dtsId1}%2C ${dtsId2}),"dssReader.getDtsData(${dtsId1}).entrySet().stream().filter(periodFilter).filter(jp(lambda e: e.getValue() != dssReader.getDtsData(${dtsId2}).get(e.getKey()))).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(e.getValue())%2C formatAsString(dssReader.getDtsData(${dtsId2}).get(e.getKey()))))).collect(toList())"
27,DvForMonth(${guiLinkId}%2C${month}),dssReader.getGuiLinkData(${guiLinkId}).entrySet().stream().filter(jp(lambda e : e.getKey().getMonth().equals(${month}))).collect(toMap(jf(lambda e : e.getKey().getYear())%2C jf(lambda e: e.getValue())))
28,DtsForMonth(${dtsId}%2C${month}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(jp(lambda e : e.getKey().getMonth().equals(${month}))).collect(toMap(jf(lambda e : e.getKey().getYear())%2C jf(lambda e: e.getValue())))
29,DtsPeriodCountEquals(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v == 200)).count()
30,DtsPeriodCountAbove(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v == 100)).count()
31,DtsPeriodCountBelow(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v == 300)).count()
32,DtsPeriodCountIgnore(${dtsId}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(commonPeriodFilter).mapToDouble(jdf(lambda e : e.getValue())).filter(jpDouble(lambda v : v == 999)).count()
33,DtsEqualsReportDv8(${dtsId}%2C${guiLinkId1}%2C${guiLinkId2}%2C${guiLinkId3}%2C${guiLinkId4}%2C${guiLinkId5}%2C${guiLinkId6}%2C${guiLinkId7}%2C${guiLinkId8}),dssReader.getDtsData(${dtsId}).entrySet().stream().filter(periodFilter).filter(jp(lambda v: v.getValue() == 200)).map(jf(lambda e : buildListPrefix(e) + String.join("%2C"%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId1}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId2}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId3}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId4}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId5}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId6}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId7}).get(e.getKey()))%2C formatAsString(dssReader.getGuiLinkData(${guiLinkId8}).get(e.getKey()))))).collect(toList())
