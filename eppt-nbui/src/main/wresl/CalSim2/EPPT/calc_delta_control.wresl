/********************** DESCRIPTION ****************************
- post-processes  delta control


********************* REVIEW HISTORY****************************
Yuxiang Feng	| DWR	|	02/09/2019	|	Setup initial file
Shankar 	    | MBK	|	01/13/2020	|	Reformatted/ standardized logic statements

/***************************************************************

/****************************** INPUTS FOR **********************************/


/******************* Total Delta Outflow *******************/
define TOT_DO_ {value C407 + REQ_DO}
/******************** Zero Flow Condition **********************/
!check if NDOI is in control
define NDOI_ZERO_CHECK {
	case atSTANDARD		{condition TOT_DO_ <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ > abs_threshold	value GT}
	case UNEXPECTED	{condition always														value UE}
}

/******************** NDOI **********************/
!check if NDOI is in control
define NDOI_CHECK {
	case atSTANDARD		{condition abs(DO_req_flow_out - TOT_DO_) <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ - DO_req_flow_out > abs_threshold	value GT}
	case belowSTANDARD	{condition TOT_DO_ - DO_req_flow_out < -1*abs_threshold	value LT}
	case UNEXPECTED 	{condition always														value UE}
}

/******************** WQ - Salinity - ANN **********************/
! check if WQ (Salinity ANN) is in control 
! MRDO due to WQ (Salinity ANN) 
define MRDO_WQ_ {value max(JP_MRDO,EM_MRDO,RS_MRDO_1,RS_MRDO_2,RS_MRDO_3,CO_MRDO)}

define ANN_CHECK {
	case atSTANDARD		{condition abs(MRDO_WQ_ - TOT_DO_) <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ - MRDO_WQ_ > abs_threshold	value GT}
	case belowSTANDARD	{condition TOT_DO_ - MRDO_WQ_ < -1*abs_threshold	value LT}
	case UNEXPECTED 	{condition always														value UE}
}

define JP_CHECK {
	case atSTANDARD		{condition TOT_DO_ - JP_MRDO < abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ - JP_MRDO > abs_threshold	value GT}
	case belowSTANDARD	{condition TOT_DO_ - JP_MRDO < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}

define EM_CHECK {
	case atSTANDARD		{condition TOT_DO_ - EM_MRDO < abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ - EM_MRDO > abs_threshold	value GT}
	case belowSTANDARD	{condition TOT_DO_ - EM_MRDO < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}

define RS_CHECK {
	case atSTANDARD		{condition TOT_DO_ - max(RS_MRDO_1,RS_MRDO_2,RS_MRDO_3) < abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ - max(RS_MRDO_1,RS_MRDO_2,RS_MRDO_3) > abs_threshold	value GT}
	case belowSTANDARD	{condition TOT_DO_ - max(RS_MRDO_1,RS_MRDO_2,RS_MRDO_3) < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}

define CO_CHECK {
	case atSTANDARD		{condition TOT_DO_ - CO_MRDO < abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition TOT_DO_ - CO_MRDO > abs_threshold	value GT}
	case belowSTANDARD	{condition TOT_DO_ - CO_MRDO < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}

/********************** EC Standards Check ******************/
! SP MBK. Some months (Rarely), D407 may equal salinity requirement at any of the stations below and in those months, it is captured as UE 
define 	RS_EC_CHECK {
	case atSTANDARD		{condition ABS(RS_EC_MONTH - RS_EC_STD) <= abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition RS_EC_MONTH - RS_EC_STD > abs_threshold	value GT}
	case belowSTANDARD	{condition RS_EC_MONTH - RS_EC_STD < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}
define 	EM_EC_CHECK {
	case atSTANDARD		{condition ABS(EM_EC_MONTH - EM_EC_STD) <= abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition EM_EC_MONTH - EM_EC_STD > abs_threshold	value GT}
	case belowSTANDARD	{condition EM_EC_MONTH - EM_EC_STD < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}
define 	JP_EC_CHECK {
	case atSTANDARD		{condition ABS(JP_EC_MONTH - JP_EC_STD) <= abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition JP_EC_MONTH - JP_EC_STD > abs_threshold	value GT}
	case belowSTANDARD	{condition JP_EC_MONTH - JP_EC_STD < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}
define 	CO_EC_CHECK {
	case atSTANDARD		{condition ABS(CO_EC_MONTH - CO_EC_STD) <= abs_threshold .and. C407_ANN > abs_threshold	value EQ}
	case aboveSTANDARD	{condition CO_EC_MONTH - CO_EC_STD > abs_threshold	value GT}
	case belowSTANDARD	{condition CO_EC_MONTH - CO_EC_STD < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}

/*************************** X2 ***************************/
define DO_Needed_X2 {
	case DO_needed {condition ABS(REQ_DO-DO_REQ_FLOW_out) > abs_threshold value REQ_DO}
	case No_DO_needed {condition always value 0}
}

! Check if Fall X2 is in control of DO
define FX2_Check {
	case notAPPLICABLE      {condition (month <= AUG .AND. month >= DEC) value NA}
	case atSTANDARD		{condition (month >= SEP .OR. month <= NOV) .and. TOT_DO_ - DO_Needed_X2 <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition (month >= SEP .OR. month <= NOV) .and. TOT_DO_ - DO_Needed_X2 > abs_threshold	value GT}
	case UNEXPECTED		{condition always														value UE}
}

! Check if Spring X2 is in control of DO
define SX2_Check {
	case notAPPLICABLE  {condition (month <= JAN .OR. month >= JUL) value NA}
	case atSTANDARD		{condition month >= FEB .and. month <= JUN .and. TOT_DO_ - DO_Needed_X2 <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition (month >= FEB .OR. month <= JUN) .and. TOT_DO_ - DO_Needed_X2 > abs_threshold	value GT}
	case UNEXPECTED		{condition always														value UE}
}

/********************** X2 Location - Roe Is ***************/
!Check x2 LOCATIONS . Comment back in based on what is needed for the report
/*
define x2_location {
	case eastofRoe	        {condition x2_prv - 64.0 < -1*none_zero_threshold	value EQ}
	case betRoeandChipps	{condition x2_prv - 64.0 > abs_threshold .AND. x2_prv - 74.0 < -1*none_zero_threshold value GT}
	case westofChipps	{condition always														value UE}
}
*/
/********************** Rio Vista MIF **********************/
!Check if Rio Vista MIF is in control
define RV_Check {
	case atSTANDARD		{condition abs(Rio_req - RIOVISTA) <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition RIOVISTA - Rio_req > abs_threshold	value GT}
	case belowSTANDARD	{condition RIOVISTA - Rio_req < -1*abs_threshold	value LT}
	case UNEXPECTED		{condition always														value UE}
}

/********************** QWEST required Flow **********************/
!Check if QWEST is in control
define QWEST_Check {
	case atSTANDARD		{condition abs(qwest_std - QWEST) <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition qwest_std - QWEST > abs_threshold	        value GT}
	case belowSTANDARD	{condition qwest_std - QWEST < -1*abs_threshold	        value LT}
	case UNEXPECTED		{condition always														value UE}
}

/********************** EI **********************/
define DO_Surplus_EI_ {value (EIEXPCTRL - JONES - BANKS)/EXPRATIO} !SURPLUS WITH RESPECT TO EI RATIO
define EI_Check {
	case atSTANDARD		{condition DO_Surplus_EI_ <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition DO_Surplus_EI_ >  abs_threshold	value GT}
	case UNEXPECTED		{condition always														value UE}
}

/*************************** OMR ***************************/
! Allowed Export Due to OMR
define OMR_ALLOWED_ {
	case notApplied {condition OMR_LBOUND == 99999	value Neg_Flt_Max} ! Shankar. To be checked the format. 
	case atSTANDARD {condition always	value OMR_NoEXP1 - OMR_LBOUND}
}

! Check if OMR is in control
define OMR_Check {
	case notAPPLICABLE  {condition month <= NOV .or. month >=JUL value NA}
	case atSTANDARD		{condition abs(OMR - OMR_LBOUND) < abs_threshold	value EQ}
	case aboveSTANDARD	{condition OMR - OMR_LBOUND >  abs_threshold	        value GT}
	case belowSTANDARD	{condition OMR - OMR_LBOUND < -1 * abs_threshold      value LT}
	case UNEXPECTED		{condition always														value UE}
}
define OMR_Check14D {
    case notAPPLICABLE  {condition month <= NOV .or. month >=JUL value NA}
	case atSTANDARD		{condition abs(OMR - OMR_RPA14d) <= abs_threshold	value EQ}
	case aboveSTANDARD	{condition OMR - OMR_RPA14d > abs_threshold	        value GT}
	case belowSTANDARD	{condition OMR - OMR_RPA14d < -1 * abs_threshold	        value LT}
	case UNEXPECTED		{condition always														value UE}
}

/*************************** NMFS ***************************/
/************************* SJR I/E **************************/
!Check if SJR I/E is in control 
define SJRIE_CHECK {
	case notAPPLICABLE  {condition month <= MAR .or. month >= JUN value NA}
	case atSTANDARD		{condition abs(NMFS_MaxExpdv - (D418_TD + D419_TD)) < abs_threshold	value EQ}
	case aboveSTANDARD	{condition D418_TD + D419_TD - NMFS_MaxExpdv > abs_threshold	        value GT}
	case belowSTANDARD	{condition D418_TD + D419_TD - NMFS_MaxExpdv < -1*abs_threshold	        value LT}
	case UNEXPECTED		{condition always														value UE}
}

/*************************** NMFS ***************************/
/*************************** DCC ****************************/
define DCC_CHECK {
	case atSTANDARD		{condition abs(NMFS_MaxExpDCCdv - (D418_TD + D419_TD)) < abs_threshold	value EQ}
	case aboveSTANDARD	{condition D418_TD + D419_TD - NMFS_MaxExpDCCdv > abs_threshold	        value GT}
	case belowSTANDARD	{condition D418_TD + D419_TD - NMFS_MaxExpDCCdv < abs_threshold	        value LT}
	case UNEXPECTED		{condition always														value UE}
}
/************** MRDO due to different controls ***************/
! MRDO due to NDOI
define MRDO_NDOI_ {value DO_req_flow_out}
! MRDO due to WQ (Salinity ANN) 
define MRDO_ANN_ {value max(JP_MRDO,EM_MRDO,RS_MRDO_1,RS_MRDO_2,RS_MRDO_3,CO_MRDO)}
! MRDO due to X2 
define MRDO_X2_ {value REQ_DO - DO_req_flow_out}! kind 'FLOW-REQ-X2' units 'CFS'}

define MRDO_FX2_ {
	case InFall {condition month >= SEP .OR. month <= NOV value MRDO_X2_}
	case NotInFall {condition always value 0}
}
define MRDO_SX2_ {
	case InSpring {condition month >= FEB .and. month <= JUN value MRDO_X2_}
	case NotInSpring {condition always value 0}
}

!Increase in MRDO due to OMR/SJRIE/DCC control 
define MRDO_Increase_ {value min(D409_Upstream - D409_Delta, C406_Upstream - C406_Delta)}

/************** SURPLUS WITH RESPECT TO EACH CONSTRAINT ***************/
define DO_Surplus_ANN_ {value TOT_DO_ - MRDO_ANN_} ! SURPLUS WITH RESPECT TO ANN 
define DO_Surplus_X2_ {value TOT_DO_ - MRDO_X2_} ! SURPLUS WITH RESPECT TO X2
define DO_Surplus_NDOI_ {value TOT_DO_ - MRDO_NDOI_} !SURPLUS WITH RESPECT TO NDOI
!define DO_Surplus_EI_ {value (EIEXPCTRL_ - D409_)/EXPRATIO_} !SURPLUS WITH RESPECT TO EI RATIO


/************** Min. Surplus due to Ag WQ  and FWS Req. ***************/
/**************Surplus after accounting only for direct outflow restrictions***************/
define DO_Surplus_MIN_ {value min(DO_Surplus_ANN_, DO_Surplus_X2_, DO_Surplus_NDOI_, DO_Surplus_EI_)}
! Account for indirect Delta outflow requirements due to Export Restrictions
! 
define DO_Surplus_TRUE_ {value DO_Surplus_MIN_ - MRDO_Increase_ + D168C_EXC_NTDEP} ! SP MBK TO CHECK THIS
/**************Delta Condition **************/
/* 100 - Balance; 200 - Excess with restrictions; 300 - Excess*/
! DELTA_CONDTN
define Delta_Cndtn {
	case Balanced {condition C407-C407_whlcv-C407_whljp-C407_WTS-C407_ANN < abs_threshold value 100}
	case Excess_Restriction {condition (C407-C407_whlcv-C407_whljp-C407_WTS-C407_ANN > abs_threshold) .and. (SJRIE_CHECK == 200 .or. SOD_EXP_OMR_ctrl == 200 .or. EI_CHECK== 200 .or. SOD_EXP_Vern_ctrl == 200) value EQ}
	case Excess {condition always value 300}
	
}
! SP MBK commented this out as this seems redundant and not clear
/* Controlling factor in Excess with restrictions delta condition*/
!is fall X2 position the restrictions in Excess with restrictions delta condition
! 200 - excess condition with FX2 restrictions; 100 - other condition 
/*
define Excess_FX2 { 
	case Excess_FX2_control {condition Delta_Cndtn == 200 .and. FX2_Check ==  200 value EQ}
	case not {condition always value GT}
}
!is OMR the restrictions in Excess with restrictions delta condition
! 200 - excess condition with OMR restrictions; 100 - other condition
define Excess_OMR { 
	case Excess_OMR_control {condition Delta_Cndtn == 200 .and. OMR_CHECK ==  200 value EQ}
	case not {condition always value GT}
}
!is Vernalis 4:1 (SJIE) the restrictions in Excess with restrictions delta condition
! 200 - excess condition with SJR IE; 100 - other condition
define Excess_Vernalis { 
	case Excess_Vernalis_control {condition Delta_Cndtn == 200 .and. SJRIE_CHECK ==  200 value EQ}
	case not {condition always value GT}
}

!identify what is the restrictions during Excess with restrictions delta condition
!100 - FX2; 200 - OMR; 300 - Vernalis 4:1 (SJIE)

define Excess_Restriction { 
	case Excess_FX2 {condition delta_Cndtn == 200 .and. Excess_FX2 == 200 value GT}
	case Excess_OMR {condition delta_Cndtn == 200 .and. Excess_OMR == 200 value EQ}
	case Excess_Vernalis {condition delta_Cndtn == 200 .and. Excess_Vernalis == 200 value LT}
	case notApplied {condition always value 9999}
}
*/ ! SP MBK commented out 
/*************** DELTA INFLOW CONTROL *********************/
define DELTA_C400MIF_Ctrl {
	case atSTANDARD		{condition C400_EXC < abs_threshold	value EQ}
	case aboveSTANDARD	{condition C400_EXC > abs_threshold	value GT}
	case UNEXPECTED	{condition always														value UE}
}
define DELTA_C157MIF_Ctrl {
	case atSTANDARD		{condition C157_EXC < abs_threshold	value EQ}
	case aboveSTANDARD	{condition C157_EXC > abs_threshold	value GT}
	case UNEXPECTED	{condition always														value UE}
}

/************************* DSS OUTPUT **************************/ 
! Status Check regards to each constraint(0-Not Controling)(1-Controling)(2-Violated)
define ANN_CHECK_ { alias ANN_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define NDOI_ZERO_CHECK_ { alias NDOI_ZERO_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }


define JP_CHECK_ { alias JP_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define EM_CHECK_ { alias EM_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define RS_CHECK_ { alias RS_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define CO_CHECK_ { alias CO_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define FX2_CHECK_ { alias FX2_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define SX2_CHECK_ { alias SX2_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define EI_CHECK_ { alias EI_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define RV_CHECK_ { alias RV_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define QWEST_CHECK_ { alias QWEST_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define OMR_CHECK14D_ { alias OMR_CHECK14D kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define SJRIE_CHECK_ { alias SJRIE_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define DCC_CHECK_ { alias DCC_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define NDOI_CHECK_ { alias NDOI_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define MRDO_NDOI__ { alias MRDO_NDOI_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }
define MRDO_ANN__ { alias MRDO_ANN_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }
define MRDO_X2__ { alias MRDO_X2_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }
define MRDO_FX2__ { alias MRDO_FX2_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }
define MRDO_SX2__ { alias MRDO_SX2_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }
define DO_Surplus_TRUE__ { alias DO_Surplus_TRUE_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }
define Delta_cndtn_ { alias Delta_cndtn kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
!define Excess_FX2_ { alias Excess_FX2 kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
!define Excess_OMR_ { alias Excess_OMR kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
!define Excess_Vernalis_ { alias Excess_Vernalis kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
!define Excess_Restriction_ { alias Excess_Restriction kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define DELTA_C400MIF_Ctrl_ { alias DELTA_C400MIF_Ctrl kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define DELTA_C157MIF_Ctrl_ { alias DELTA_C157MIF_Ctrl kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
!define X2_LOCATION_ { alias X2_LOCATION kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define RS_EC_CHECK_ { alias RS_EC_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define EM_EC_CHECK_ { alias EM_EC_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define JP_EC_CHECK_ { alias JP_EC_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define CO_EC_CHECK_ { alias CO_EC_CHECK kind 'DTS-DELTA-CONTROL-STATUS' units 'NONE' }
define DO_Surplus_MIN__ { alias DO_Surplus_MIN_ kind 'DTS-DELTA-CONTROL-VALUE' units 'TAF' }



