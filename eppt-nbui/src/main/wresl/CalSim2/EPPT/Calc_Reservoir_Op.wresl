/************************************
Yuxiang, DWR, BDO        														
20190214								 											 
																					  
This file check the controls of Reservoir opeartion during each timestep  
underreview - combine Spill/CAP/Flood/DB - RC????

/************************** Trinity ****************************/
/*This defind the status of Trinity resevoir        				
1 = Spill 			2 = at Capacity 	3 = above flood 		4 = @ flood			
5 = below flood		6 = at Dead Pool	7 = below Dead Pool		0 = Debug

define TRNTY_Storage_CHECK_ { 
	case spills {
	condition F1 > abs_threshold !.and. S1 - S1LEVEL5DV = 0.
	value 1}
	case atCapacity {
	condition S1LEVEL5DV - S1 = 0
	value 2}
	case aboveflood  { 
	condition S1  - S1LEVEL4DV > abs_threshold
	value 3}
	case atflood {
	condition abs(S1  - S1LEVEL4DV) < abs_threshold
	value 4}
	case belowflood {
	condition S1LEVEL4DV - S1 > abs_threshold .and. S1 - S1LEVEL1DV > abs_threshold
	value 5}
	case atBP {
	condition abs(S1 - S1LEVEL1DV) < abs_threshold
	value 6}
	case belowDP {
	condition S1LEVEL1DV - S1 > abs_threshold
	value 7}
	case debug {
	condition always
	value 0}
}
*/
/************************** Trinity ****************************/
!determines during which timestep Trinity reservoir has unrecoverable spills
define TRNTY_Spill_CHECK_ {
	case spill {
	condition F1 > abs_threshold
	value 200}
	case noSpill {
	condition always
	value 100}
}
!determines during which timestep Trinity reservoir was at maximum capacity 
define TRNTY_CAP_CHECK_ {
	case AtCapacity {
		condition abs(S1 - S1LEVEL5DV) <= abs_threshold
		value 200
	}
	case notAtCapacity{
		condition always
		value 100
	}
}
!determines during which timesteps flood release controls Trinity reservoir release
define TRNTY_FLD_CHECK_ {
	case atFlood {
		condition abs(S1 - S1LEVEL4DV) <= abs_threshold
		value 200
	}
	case belowflood{
		condition S1 - S1LEVEL4DV < -abs_threshold
		value 300
	}
	case aboveFlood {
		condition always 
		value 100
	}
}

!determines was Trinity reservoir storage above/at/below Rule curve in each timestep
define TRNTY_RC_CHECK_ {
	case belowRC{
		condition S1LEVEL3DV - S1 > abs_threshold
		value 300
	}
	case atRC {
		condition abs(S1 - S1LEVEL3DV) <= abs_threshold
		value 200
	}
	case aboveRC{
		condition always
		value 100
	}
}


!determines was Trinity reservoir above/at/below Dead Pool in each timestep
define TRNTY_DP_CHECK_ {
	case belowdeadpool{
		condition S1LEVEL1DV - S1 > abs_threshold
		value 300
	}
	case atdeadpool {
		condition abs(S1 - S1LEVEL1DV) <= abs_threshold
		value 200
	}
	case abovedeadpool{
		condition always
		value 100
	}
}

!determines was Clear Creek Tunnel met Import requirement 
define ClrCkTnnl_import_CHECK_ {
	case at {
		condition abs(D100 - TRIN_IMPDV) <= abs_threshold
		value 200
	}
	case above{
		condition D100 - TRIN_IMPDV > abs_threshold
		value 100
	}
	case below{
		condition always
		value 300
	}
}

!determines was Clear Creek Tunnel at Capacity (3300CFS)
define ClrCkTnnl_Cap_CHECK_ {
	case at {
		condition abs(D100 - 3300) <= abs_threshold
		value 200
	}
	case above{
		condition D100 - 3300 > abs_threshold
		value 100
	}
	case below{
		condition always
		value 300
	}
}



/************************** SHASTA ****************************/ 
!determines during which timestep Shasta reservoir has unrecoverable spills
define SHST_Spill_CHECK_ {
	case spill {
	condition F4 > abs_threshold
	value 200}
	case noSpill {
	condition always
	value 100}
}
!determines during which timesteps Shasta reservoir was at maximum capacity 
define SHST_CAP_CHECK_{
	case Capacity {
		condition abs(S4 - S4LEVEL6DV) <= abs_threshold
		value 200
	}
	case notCapacity{
		condition always
		value 100
	}
}
!determines during which timesteps flood release controls Shasta reservoir release
define SHST_FLD_CHECK_{
	case Flood {
		condition abs(S4 - S4LEVEL5DV) <= abs_threshold
		value 200
	}
	case belowFlood{
		condition S4 - S4LEVEL5DV < -abs_threshold
		value 300
	}
		case aboveFlood{
		condition always
		value 100
	}
}
!determines was Shasta reservoir storage above/at/below Rule curve in each timestep
define SHST_RC_CHECK_ {
	case belowRC{
		condition S4LEVEL3DV - S4 > abs_threshold
		value 300
	}
	case atRC {
		condition abs(S4 - S4LEVEL3DV) <= abs_threshold
		value 200
	}
	case aboveRC{
		condition always
		value 100
	}
}
!determines was SHASTA reservoir above/at/below Dead Pool in each timestep
define SHST_DP_CHECK_{
	case belowdeadpool{
		condition S4LEVEL1DV - S4 > abs_threshold
		value 300
	}
	case atdeadpool {
		condition abs(S4 - S4LEVEL1DV) <= abs_threshold
		value 200
	}
	case abovedeadpool{
		condition always
		value 100
	}
}


/************************** FOLSOM ****************************/ 
!determines during which timestep Flosom reservoir has unrecoverable spills
define FLSM_Spill_CHECK_ {
	case spill {
	condition F8 > abs_threshold
	value 200}
	case noSpill {
	condition always
	value 100}
}
!determines during which timesteps Folsom reservoir was at maximum capacity 
define FLSM_CAP_CHECK_{
	case Capacity {
		condition abs(S8 - S8LEVEL6DV) <= abs_threshold
		value 200
	}
	case notCapacity{
		condition always
		value 100
	}
}
!determines during which timesteps flood release controls Folsom reservoir release
define FLSM_FLD_CHECK_{
	case Flood {
		condition abs(S8 - S8LEVEL5DV) <= abs_threshold
		value 200
	}
	case belowFlood{
		condition S8 - S8LEVEL5DV < - abs_threshold
		value 300
	}
		case aboveFlood{
		condition always
		value 100
	}
}
!determines was Flosom reservoir storage above/at/below Rule curve in each timestep
define FLSM_RC_CHECK_ {
	case belowRC{
		condition S8LEVEL3DV - S8 > abs_threshold
		value 300
	}
	case atRC {
		condition abs(S8 - S8LEVEL3DV) <= abs_threshold
		value 200
	}
	case aboveRC{
		condition always
		value 100
	}
}
!determines was Flosom reservoir above/at/below Dead Pool in each timestep
define FLSM_DP_CHECK_{
	case belowdeadpool{
		condition S8LEVEL1DV - S8 > abs_threshold
		value 300
	}
	case atdeadpool {
		condition abs(S8 - S8LEVEL1DV) <= abs_threshold
		value 200
	}
	case abovedeadpool{
		condition always
		value 100
	}
}



/************************** OROVILLE ****************************/ !underreview - add spill check, check flood status to 0-1-2 set up
!determines during which timestep Flosom reservoir has unrecoverable spills
define OROV_Spill_CHECK_ {
	case spill {
	condition F6 > abs_threshold
	value 200}
	case noSpill {
	condition always
	value 100}
}
!determines during which timesteps Oroville reservoir was at maximum capacity 
define OROV_CAP_CHECK_{
	case Capacity {
		condition abs(S6 - S6LEVEL6DV) <= abs_threshold
		value 200
	}
	case notCapacity{
		condition always
		value 100
	}
}
!determines during which timesteps flood release controls Oroville reservoir release
define OROV_FLD_CHECK_{
	case Flood {
		condition abs(S6 - S6LEVEL5DV) <= abs_threshold
		value 200
	}
	case belowControl{
		condition S6 - S6LEVEL5DV < -abs_threshold
		value 300
	}
		case aboveControl{
		condition always
		value 100
	}
}
!determines was Oroville reservoir storage above/at/below Rule curve in each timestep
define OROV_RC_CHECK_ {
	case belowRC{
		condition S6LEVEL3DV - S6 > abs_threshold
		value 300
	}
	case atRC {
		condition abs(S6 - S6LEVEL3DV) <= abs_threshold
		value 200
	}
	case aboveRC{
		condition always
		value 100
	}
}
!determines was Oroville reservoir above/at/below Dead Pool in each timestep
define OROV_DP_CHECK_{
	case belowdeadpool{
		condition S6LEVEL1DV - S6 > abs_threshold
		value 300
	}
	case atdeadpool {
		condition abs(S6 - S6LEVEL1DV) <= abs_threshold
		value 200
	}
	case abovedeadpool{
		condition always
		value 100
	}
}


/************************** San Luis CVP ****************************/
! control check for San Luis CVP reservoir release
!determines during which timesteps San Luis CVP reservoir was at maximum capacity 
define SLCVP_CAP_CHECK_{
	case Capacity {
		condition abs(S11 - S11_MAX) <= abs_threshold
		value 200
	}
	case notCapacity{
		condition always
		value 100
	}
}


!determines Luis CVP reservoir storage VS CVP Rule curve in each timestep 
!100 = above RC, 200 = at RC, 300 = below RC
define SLCVP_RC_CHECK_{
	case AboveRC{
		condition (S11 - S11_RC) > none_zero_threshold
		value 100
	}
	case AtRC{
		condition abs(S11 - S11_RC) <= none_zero_threshold
		value 200
	}
	case BelowRC{
		condition (S11 - S11_RC) < -none_zero_threshold
		value 300
	}	
}

!determines Luis CVP reservoir storage VS CVP Dead Pool in each timestep
!100 = above DP, 200 = at DP, 300 = below DP
define SLCVP_DP_CHECK_{
	case AboveDP{
		condition (S11 - S11_DP) > none_zero_threshold
		value 100
	}
	case AtDP{
		condition abs(S11 - S11_DP) <= none_zero_threshold
		value 200
	}
	case BelowDP{
		condition (S11 - S11_DP) < -none_zero_threshold
		value 300
	}	
}


/************************** San Luis SWP ****************************/
! control check for San Luis SWP reservoir release
!determines during which timesteps San Luis SWP reservoir was at maximum capacity 
define SLSWP_CAP_CHECK_{
	case Capacity {
		condition abs(S12 - S12_MAX) <= abs_threshold
		value 200
	}
	case notCapacity{
		condition always
		value 100
	}
}

!determines during which timesteps San Luis SWP reservoir storage VS SWP Rule curve 
!100 = above RC, 200 = at RC, 300 = below RC
define SLSWP_RC_CHECK_{
	case AboveRC{
		condition (S12 - S12_RC) > none_zero_threshold
		value 100
	}
	case AtRC{
		condition abs(S12 - S12_RC) <= none_zero_threshold
		value 200
	}
	case BelowRC{
		condition (S12 - S12_RC) < -none_zero_threshold
		value 300
	}	
}

!determines San Luis SWP reservoir storage VS SWP Dead Pool in each timestep
!100 = above DP, 200 = at DP, 300 = below DP
define SLSWP_DP_CHECK_{
	case AboveDP{
		condition (S12 - S12_DP) > none_zero_threshold
		value 100
	}
	case AtDP{
		condition abs(S12 - S12_DP) <= none_zero_threshold
		value 200
	}
	case BelowDP{
		condition (S12 - S12_DP) < -none_zero_threshold
		value 300
	}	
}
/************************** Outputs ****************************/
!Outputs for Trinity
define TRNTY_Spill_STATUS_DTS {alias TRNTY_Spill_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define TRNTY_CAP_STATUS_DTS {alias TRNTY_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define TRNTY_FLD_STATUS_DTS {alias TRNTY_FLD_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define TRNTY_RC_STATUS_DTS {alias TRNTY_RC_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define TRNTY_DP_STATUS_DTS {alias TRNTY_DP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define ClrCkTnnl_import_STATUS_DTS {alias ClrCkTnnl_import_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define ClrCkTnnl_CAP_STATUS_DTS {alias ClrCkTnnl_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}

!Outputs for Shasta
define SHST_Spill_STATUS_DTS {alias SHST_SPILL_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SHST_CAP_STATUS_DTS {alias SHST_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SHST_FLD_STATUS_DTS {alias SHST_FLD_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SHST_RC_STATUS_DTS {alias SHST_RC_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SHST_DP_STATUS_DTS {alias SHST_DP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
!Outputs for Flosom
define FLSM_Spill_STATUS_DTS {alias FLSM_SPILL_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define FLSM_CAP_STATUS_DTS {alias FLSM_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define FLSM_FLD_STATUS_DTS {alias FLSM_FLD_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define FLSM_RC_STATUS_DTS {alias FLSM_RC_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define FLSM_DP_STATUS_DTS {alias FLSM_DP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
!Outputs for Oroville
define OROV_Spill_STATUS_DTS {alias OROV_SPILL_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define OROV_CAP_STATUS_DTS {alias OROV_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define OROV_FLD_STATUS_DTS {alias OROV_FLD_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define OROV_RC_STATUS_DTS {alias OROV_RC_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define OROV_DP_STATUS_DTS {alias OROV_DP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
!Outputs for San Luis
!SWP potion
define SLSWP_CAP_STATUS_DTS {alias SLSWP_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SLSWP_RC_STATUS_DTS {alias SLSWP_RC_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SLSWP_DP_STATUS_DTS {alias SLSWP_DP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
!CVP potion
define SLCVP_CAP_STATUS_DTS {alias SLCVP_CAP_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SLCVP_RC_STATUS_DTS {alias SLCVP_RC_CHECK_ kind 'DTS-STATUS' units 'NONE'}
define SLCVP_DP_STATUS_DTS {alias SLCVP_DP_CHECK_ kind 'DTS-STATUS' units 'NONE'}


