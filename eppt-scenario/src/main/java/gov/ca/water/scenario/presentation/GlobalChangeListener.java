/*
 * Enhanced Post Processing Tool (EPPT) Copyright (c) 2019.
 *
 * EPPT is copyrighted by the State of California, Department of Water Resources. It is licensed
 * under the GNU General Public License, version 2. This means it can be
 * copied, distributed, and modified freely, but you may not restrict others
 * in their ability to copy, distribute, and modify it. See the license below
 * for more details.
 *
 * GNU General Public License
 */

package gov.ca.water.scenario.presentation;

import java.awt.Component;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import gov.ca.water.businessservice.impl.XMLParsingSvcImpl;
import gov.ca.water.calgui.busservice.impl.ModelRunSvcImpl;
import gov.ca.water.calgui.techservice.IErrorHandlingSvc;
import gov.ca.water.calgui.techservice.impl.ErrorHandlingSvcImpl;
import gov.ca.water.scenario.ui.JLinkedSlider;
import org.apache.log4j.Logger;
import org.swixml.SwingEngine;

/**
 * This class is for Listening all the change events which are generated by the
 * application.(We only use this for "Regulations" tab)
 *
 * @author Mohan
 */
public class GlobalChangeListener implements ChangeListener
{

	private static final Logger LOG = Logger.getLogger(GlobalChangeListener.class.getName());
	private SwingEngine swingEngine = XMLParsingSvcImpl.getXMLParsingSvcImplInstance().getSwingEngine();
	private IErrorHandlingSvc errorHandlingSvc = new ErrorHandlingSvcImpl();

	@Override
	public void stateChanged(ChangeEvent changeEvent)
	{
		try
		{
			String lcName = ((Component) changeEvent.getSource()).getName().toLowerCase();
			LOG.debug(lcName);
			if(lcName.equals("reg_tabbedpane"))
			{
				swingEngine.find("scrRegValues").setVisible(false);
				((JPanel) swingEngine.find("reg_panTab")).setBorder(BorderFactory.createTitledBorder("Values"));
				boolean showTablePanel = ((JRadioButton) swingEngine.find("rdbRegQS_UD")).isSelected()
						&& (((JTabbedPane) changeEvent.getSource()).getSelectedIndex() != 2); // DO
				// NOT
				// SHOW
				// table
				// value
				// panel
				// for
				// SJR
				// tab

				showTablePanel = showTablePanel || (lcName.equals("ckbReg_TRNTY") || lcName.equals("ckbReg_PUMP"));
				// Hide/show reg_panTab as needed and selected - will be updated by
				// focus control

				// Force display of panel for Trinity, Pumping
				// showTablePanel = showTablePanel || (lcName.equals("ckbReg_TRNTY")
				// || lcName.equals("ckbReg_PUMP"));

				this.swingEngine.find("reg_panTab").setVisible(showTablePanel);
				this.swingEngine.find("reg_panTabPlaceholder").setVisible(!showTablePanel);

			}
			else if(lcName.equals("run_sldthreads"))
			{
				ModelRunSvcImpl.setSimultaneousRuns(((JSlider) changeEvent.getSource()).getValue());
				int simultaneousRuns = ModelRunSvcImpl.getSimultaneousRuns();
				((JLabel) swingEngine.find("run_lblThreads")).setText(" " + simultaneousRuns + " run"
						+ ((simultaneousRuns > 1) ? "s" : ""));

			}
			else if(changeEvent.getSource() instanceof JLinkedSlider)
			{

				// Handle LinkedSlider ...

				String sldrName = ((Component) changeEvent.getSource()).getName();
				JLinkedSlider sldr = (JLinkedSlider) swingEngine.find(sldrName);
				if(sldr.getRTextBoxID() != "")
				{
					JTextField txtfR = (JTextField) swingEngine.find(sldr.getRTextBoxID());
					txtfR.setText(Integer.toString(sldr.getValue()));
				}
				if(sldr.getLTextBoxID() != "")
				{
					JTextField txtfL = (JTextField) swingEngine.find(sldr.getLTextBoxID());
					int leftVal = sldr.getMaximum() - sldr.getValue();
					txtfL.setText(Integer.toString(leftVal));
				}
			}
		}
		catch(Exception e)
		{
			LOG.error(e.getMessage());
			String messageText = "Unable to initialize change listener.";
			errorHandlingSvc.businessErrorHandler(messageText, e);
		}
	}
}