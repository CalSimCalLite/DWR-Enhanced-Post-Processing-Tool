/*
 * Copyright (c) 2019
 * California Department of Water Resources
 * All Rights Reserved.  DWR PROPRIETARY/CONFIDENTIAL.
 * Source may not be released without written approval from DWR
 */

package gov.ca.water.scenario.presentation;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Arrays;
import java.util.List;
import javax.swing.*;

import gov.ca.water.businessservice.IApplyDynamicConDele;
import gov.ca.water.businessservice.IDynamicControlSvc;
import gov.ca.water.businessservice.IScenarioSvc;
import gov.ca.water.businessservice.IXMLParsingSvc;
import gov.ca.water.businessservice.impl.ApplyDynamicConDeleImp;
import gov.ca.water.businessservice.impl.DynamicControlSvcImpl;
import gov.ca.water.businessservice.impl.ScenarioSvcImpl;
import gov.ca.water.businessservice.impl.XMLParsingSvcImpl;
import gov.ca.water.calgui.constant.Constant;
import gov.ca.water.calgui.techservice.IAuditSvc;
import gov.ca.water.calgui.techservice.IDialogSvc;
import gov.ca.water.calgui.techservice.IErrorHandlingSvc;
import gov.ca.water.calgui.techservice.impl.AuditSvcImpl;
import gov.ca.water.calgui.techservice.impl.DialogSvcImpl;
import gov.ca.water.calgui.techservice.impl.ErrorHandlingSvcImpl;
import org.apache.log4j.Logger;
import org.swixml.SwingEngine;

/**
 * This class is for Listening all the item events(radio button, check box)
 * which are generated by the application.
 *
 * @author Mohan
 */
public class GlobalItemListener implements ItemListener
{

	private static final Logger LOG = Logger.getLogger(GlobalItemListener.class.getName());
	private IApplyDynamicConDele _applyDynamicConDele = new ApplyDynamicConDeleImp();
	private SwingEngine _swingEngine = XMLParsingSvcImpl.getXMLParsingSvcImplInstance().getSwingEngine();
	private IDynamicControlSvc _dynamicControlSvc = DynamicControlSvcImpl.getDynamicControlSvcImplInstance();
	private IAuditSvc _auditSvc = AuditSvcImpl.getAuditSvcImplInstance();
	private IScenarioSvc _scenarioSvc = ScenarioSvcImpl.getScenarioSvcImplInstance();
	private String _oldValue = "";
	private IErrorHandlingSvc _errorHandlingSvc = new ErrorHandlingSvcImpl();
	private IDialogSvc _dialogSvc = DialogSvcImpl.getDialogSvcInstance();
	private IXMLParsingSvc _xmlParsingSvc = XMLParsingSvcImpl.getXMLParsingSvcImplInstance();

	/*
	 * we use the rollBackFlag to avoid a cascade effect when we show a
	 * ConfirmDialog and user selects cancel
	 *
	 */
	private boolean _rollBackFlag = false;

	@Override
	public void itemStateChanged(ItemEvent ie)
	{
		try
		{
			if(_scenarioSvc.isCLSFileLoading())
			{
				return;
			}
			if(_dynamicControlSvc.isPreventRoeTrigger())
			{
				return;
			}
			String itemName = ((JComponent) ie.getItem()).getName();
			LOG.debug(itemName);

			// ----- Insert ReportListener handling
			if(itemName != null && itemName.startsWith("rdbSchem"))
			{
				schematicItemChanged(ie, itemName);
			}

			// End ReportListener handling -----

			boolean isSelected = ie.getStateChange() == ItemEvent.SELECTED;
			boolean isEnabled = ((JComponent) ie.getItem()).isEnabled();
			boolean optionFromTheBox = false;
			if(!_rollBackFlag)
			{
				/*
				 * The following code is used for the special case where we show
				 * a popup box for some controls in the "Run Setting" and
				 * "Hydroclimate" tabs.
				 *
				 * Extended by tad 20160206 to handle special warning that a
				 * change to the climate projection period will change a
				 * Regulations SJR setting
				 *
				 */

				List<String> controlIdForExtendedDialogBox = Arrays.asList("hyd_rdb2005", "hyd_rdb2030", "hyd_rdbCCEL",
						"hyd_rdbCCLL");

				if(controlIdForExtendedDialogBox.contains(itemName))
				{
					if(!isSelected)
					{
						_oldValue = itemName;
					}
					else
					{
						JRadioButton regrdb = (JRadioButton) _swingEngine.find("rdbRegQS_UD");
						if(!regrdb.isSelected())
						{
							String confirmText = "";
							if("hyd_rdb2005".equals(itemName)
									&& !((JRadioButton) _swingEngine.find("SJR_interim")).isSelected())
							{
								confirmText = "Changing to " + ((JRadioButton) ie.getItem()).getText()
										+ " will also set the San Joaquin River restoration flow selection to 'interim' in the Regulations dashboard.";
							}
							else if(!"hyd_rdb2005".equals(itemName)
									&& !((JRadioButton) _swingEngine.find("SJR_full")).isSelected())
							{
								confirmText = "Changing to " + ((JRadioButton) ie.getItem()).getText()
										+ " will also set the San Joaquin River restoration flow selection to 'full' in the Regulations dashboard.";
							}
							if(!confirmText.isEmpty())
							{
								boolean proceed = "OK".equals(
										_dialogSvc.getOKCancel(confirmText, JOptionPane.QUESTION_MESSAGE));

								if(!proceed)
								{
									_rollBackFlag = true;
									((JRadioButton) _swingEngine.find(_oldValue)).setSelected(true);
									_rollBackFlag = false;
									return;
								}
							}
						}
					}
				}

				List<String> controlIdForDialogBox;
				if(!"hyd_rdbCCEL".equals(_oldValue) && !"hyd_rdbCCLL".equals(_oldValue))
				{
					controlIdForDialogBox = Arrays.asList("run_rdbD1485", "run_rdbD1641", "run_rdbBO", "hyd_rdb2005",
							"hyd_rdb2030", "hyd_rdbCCLL", "hyd_rdbCCEL");
				}
				else
				{
					controlIdForDialogBox = Arrays.asList("run_rdbD1485", "run_rdbD1641", "run_rdbBO", "hyd_rdb2005",
							"hyd_rdb2030");
				}

				List<String> controlIdOfCPP = Arrays.asList("hyd_rdbCCEL", "hyd_rdbCCLL", "hyd_ckb1", "hyd_ckb2",
						"hyd_ckb3", "hyd_ckb4", "hyd_ckb5");
				List<String> controlIdForOldValue = Arrays.asList("run_rdbD1485", "run_rdbD1641", "run_rdbBO",
						"hyd_rdb2005", "hyd_rdb2030", "hyd_rdbCCEL", "hyd_rdbCCLL");
				if(!isSelected && controlIdForOldValue.contains(itemName))
				{
					_oldValue = itemName;
				}
				if(controlIdForDialogBox.contains(itemName))
				{
					if(isSelected)
					{
						boolean proceed = ("OK".equals(_dialogSvc.getOKCancel(
								"You have selected " + ((JRadioButton) ie.getItem()).getText()
										+ ".\n  Do you wish to use the WSI/DI curves for this configuration?",
								JOptionPane.QUESTION_MESSAGE)));
						if(proceed)
						{
							optionFromTheBox = true;
						}
						else
						{
							_rollBackFlag = true;
							((JRadioButton) _swingEngine.find(_oldValue)).setSelected(true);
							_rollBackFlag = false;
							return;
						}
					}
				}
				else if(isSelected && controlIdOfCPP.contains(itemName))
				{
					optionFromTheBox = true;
				}
			}
			if(isEnabled)

			{
				_applyDynamicConDele.applyDynamicControl(itemName, isSelected, isEnabled, optionFromTheBox);
			}
			if(!_xmlParsingSvc.checkIsItFromResultPart(itemName))
			{
				_auditSvc.addAudit(itemName, String.valueOf(!isSelected), String.valueOf(isSelected));
			}

		}
		catch(HeadlessException e)
		{
			LOG.error(e.getMessage());
			String messageText = "Unable to initialize item listeners";
			_errorHandlingSvc.businessErrorHandler(messageText, e);
		}
	}

	private void schematicItemChanged(ItemEvent ie, String itemName)
	{
		// Schematic (map) view
		JPanel p = (JPanel) _swingEngine.find("schematic_card_layout");
		CardLayout cl = (CardLayout) p.getLayout();
		if(ie.getStateChange() == ItemEvent.SELECTED)
		{

			if("rdbSchemNormal".equals(itemName))
			{
				cl.show(p, "First");
				updateSchematicLayout();
			}
			else if("rdbSchemMB".equals(itemName))
			{
				cl.show(p, "Second");
				updateSchematicLayout();
			}
		}
	}

	/**
	 * Kludge to force redraw when switching between schematic views
	 */
	private void updateSchematicLayout()
	{
		JFrame f = (JFrame) _swingEngine.find(Constant.MAIN_FRAME_NAME);
		Dimension d = f.getSize();
		f.setSize(new Dimension(d.width + 1, d.height));
		f.setSize(d);
	}
}
