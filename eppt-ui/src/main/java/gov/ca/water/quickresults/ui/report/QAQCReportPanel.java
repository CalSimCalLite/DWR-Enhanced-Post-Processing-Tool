/*
 * Enhanced Post Processing Tool (EPPT) Copyright (c) 2019.
 *
 * EPPT is copyrighted by the State of California, Department of Water Resources. It is licensed
 * under the GNU General Public License, version 2. This means it can be
 * copied, distributed, and modified freely, but you may not restrict others
 * in their ability to copy, distribute, and modify it. See the license below
 * for more details.
 *
 * GNU General Public License
 */

package gov.ca.water.quickresults.ui.report;

import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.Style;
import javax.swing.text.StyledDocument;

import gov.ca.water.calgui.project.EpptScenarioRun;
import gov.ca.water.calgui.wresl.ProcessOutputConsumer;
import gov.ca.water.quickresults.ui.TextAreaPrintStream;
import gov.ca.water.quickresults.ui.projectconfig.ProjectConfigurationPanel;

import rma.swing.RmaJIntegerField;
import rma.swing.RmaJPanel;

/**
 * Company: Resource Management Associates
 *
 * @author <a href="mailto:adam@rmanet.com">Adam Korynta</a>
 * @since 05-13-2019
 */
public class QAQCReportPanel extends RmaJPanel implements ProcessOutputConsumer
{
	private static final Logger LOGGER = Logger.getLogger(QAQCReportPanel.class.getName());
	private JPanel _panel1;
	private JButton _generateReportButton;
	private JTextPane _textPane1 = new JTextPane();
	private JComboBox<EpptScenarioRun> _altComboBox;
	private JComboBox<EpptScenarioRun> _baseComboBox;
	private JTextField _precisionTextField;
	private JTextField _reportSubtitle;
	private TextAreaPrintStream _textAreaPrintStream;

	public QAQCReportPanel()
	{
		$$$setupUI$$$();
		addListener();
		setLayout(new BorderLayout());
		add($$$getRootComponent$$$(), BorderLayout.CENTER);
	}

	private void addListener()
	{
		_generateReportButton.addActionListener(e -> generateReport());
	}

	private void generateReport()
	{
		EpptScenarioRun baseRun = (EpptScenarioRun) _baseComboBox.getSelectedItem();
		if(baseRun != null)
		{
			CompletableFuture.runAsync(this::generateQAQCReport);
		}
		else
		{
			JOptionPane.showMessageDialog(this, "No Base Scenario Run selected.");
		}
	}

	private void generateQAQCReport()
	{
		try
		{
			QAQCProcessRunner processRunner = new QAQCProcessRunner(Paths.get("Ouptut.pdf"),
					Paths.get("C:\\Git\\DWR\\EPPT\\DWR-Enhanced-Post-Processing-Tool\\eppt-jasper-engine\\src\\test\\resources\\QAQC_Report.jrxml"),
					this);

			processRunner.run();
			//			ReportRunner runner = new JasperReportRunner();
			//			runner.runReportWithOutputFile(Paths.get("Ouptut.pdf"),
			//					Paths.get("C:\\Git\\DWR\\EPPT\\DWR-Enhanced-Post-Processing-Tool\\eppt-jasper-engine\\src\\test\\resources\\QAQC_Report.jrxml"));
		}
		catch(RuntimeException e)
		{
			LOGGER.log(Level.SEVERE, "Unable to generate Report PDF", e);
		}
	}

	private void createUIComponents()
	{
		_precisionTextField = new RmaJIntegerField();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		createUIComponents();
		_panel1 = new JPanel();
		_panel1.setLayout(new BorderLayout(0, 0));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
		_panel1.add(panel1, BorderLayout.SOUTH);
		_generateReportButton = new JButton();
		_generateReportButton.setText("Generate Report");
		panel1.add(_generateReportButton);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
		_panel1.add(panel2, BorderLayout.NORTH);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridBagLayout());
		panel2.add(panel3);
		final JLabel label1 = new JLabel();
		label1.setText("Base Scenario Run:");
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(label1, gbc);
		final JLabel label2 = new JLabel();
		label2.setText("Alternative Scenario Run:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(label2, gbc);
		_altComboBox = new JComboBox();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(_altComboBox, gbc);
		_baseComboBox = new JComboBox();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.ipadx = 60;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(_baseComboBox, gbc);
		final JLabel label3 = new JLabel();
		label3.setText("Precision:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(label3, gbc);
		_precisionTextField.setText("2");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(_precisionTextField, gbc);
		_reportSubtitle = new JTextField();
		_reportSubtitle.setText("Subtitle");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(_reportSubtitle, gbc);
		final JLabel label4 = new JLabel();
		label4.setText("QA/QC Report Subtitle:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 5);
		panel3.add(label4, gbc);
		final JScrollPane scrollPane1 = new JScrollPane();
		_panel1.add(scrollPane1, BorderLayout.CENTER);
		_textPane1 = new JTextPane();
		_textPane1.setPreferredSize(new Dimension(800, 250));
		scrollPane1.setViewportView(_textPane1);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return _panel1;
	}

	public void fillComboScenarioRuns()
	{
		_textPane1.setText("");
		_baseComboBox.removeAllItems();
		_altComboBox.removeAllItems();
		ProjectConfigurationPanel projectConfigurationPanel = ProjectConfigurationPanel.getProjectConfigurationPanel();
		List<EpptScenarioRun> allEpptScenarioRuns = projectConfigurationPanel.getAllEpptScenarioRuns();
		EpptScenarioRun baseScenario = projectConfigurationPanel.getBaseScenario();
		allEpptScenarioRuns.forEach(s -> _baseComboBox.addItem(s));
		_altComboBox.addItem(null);
		allEpptScenarioRuns.forEach(s -> _altComboBox.addItem(s));
		if(baseScenario != null)
		{
			_baseComboBox.setSelectedItem(baseScenario);
		}
		_altComboBox.setSelectedItem(null);
	}

	@Override
	public void runStarted(EpptScenarioRun scenarioRun, Process process)
	{
		_textAreaPrintStream = new TextAreaPrintStream(_textPane1, process.getInputStream(), process.getErrorStream());
	}

	@Override
	public void runFinished(Process process)
	{
		if(process.exitValue() == 0)
		{
			try
			{
				Desktop.getDesktop().open(Paths.get("Ouptut.pdf").toFile());
			}
			catch(IOException e)
			{
				LOGGER.log(Level.WARNING, "Desktop not supported. PDF will not be displayed", e);
			}
		}
		if(_textAreaPrintStream != null)
		{
			_textAreaPrintStream.close();
		}
	}
}
